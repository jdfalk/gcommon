// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: authpb/v2/change_password_request.proto

package authpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChangePasswordRequest represents a request to change user password
type ChangePasswordRequest struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CurrentPassword    *string                `protobuf:"bytes,1,opt,name=current_password,json=currentPassword"`
	xxx_hidden_NewPassword        *string                `protobuf:"bytes,2,opt,name=new_password,json=newPassword"`
	xxx_hidden_ConfirmPassword    *string                `protobuf:"bytes,3,opt,name=confirm_password,json=confirmPassword"`
	xxx_hidden_InvalidateSessions bool                   `protobuf:"varint,4,opt,name=invalidate_sessions,json=invalidateSessions"`
	xxx_hidden_InvalidateApiKeys  bool                   `protobuf:"varint,5,opt,name=invalidate_api_keys,json=invalidateApiKeys"`
	xxx_hidden_ForceChange        bool                   `protobuf:"varint,6,opt,name=force_change,json=forceChange"`
	xxx_hidden_UserId             *string                `protobuf:"bytes,7,opt,name=user_id,json=userId"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	mi := &file_authpb_v2_change_password_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authpb_v2_change_password_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ChangePasswordRequest) GetCurrentPassword() string {
	if x != nil {
		if x.xxx_hidden_CurrentPassword != nil {
			return *x.xxx_hidden_CurrentPassword
		}
		return ""
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		if x.xxx_hidden_NewPassword != nil {
			return *x.xxx_hidden_NewPassword
		}
		return ""
	}
	return ""
}

func (x *ChangePasswordRequest) GetConfirmPassword() string {
	if x != nil {
		if x.xxx_hidden_ConfirmPassword != nil {
			return *x.xxx_hidden_ConfirmPassword
		}
		return ""
	}
	return ""
}

func (x *ChangePasswordRequest) GetInvalidateSessions() bool {
	if x != nil {
		return x.xxx_hidden_InvalidateSessions
	}
	return false
}

func (x *ChangePasswordRequest) GetInvalidateApiKeys() bool {
	if x != nil {
		return x.xxx_hidden_InvalidateApiKeys
	}
	return false
}

func (x *ChangePasswordRequest) GetForceChange() bool {
	if x != nil {
		return x.xxx_hidden_ForceChange
	}
	return false
}

func (x *ChangePasswordRequest) GetUserId() string {
	if x != nil {
		if x.xxx_hidden_UserId != nil {
			return *x.xxx_hidden_UserId
		}
		return ""
	}
	return ""
}

func (x *ChangePasswordRequest) SetCurrentPassword(v string) {
	x.xxx_hidden_CurrentPassword = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *ChangePasswordRequest) SetNewPassword(v string) {
	x.xxx_hidden_NewPassword = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *ChangePasswordRequest) SetConfirmPassword(v string) {
	x.xxx_hidden_ConfirmPassword = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *ChangePasswordRequest) SetInvalidateSessions(v bool) {
	x.xxx_hidden_InvalidateSessions = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *ChangePasswordRequest) SetInvalidateApiKeys(v bool) {
	x.xxx_hidden_InvalidateApiKeys = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *ChangePasswordRequest) SetForceChange(v bool) {
	x.xxx_hidden_ForceChange = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *ChangePasswordRequest) SetUserId(v string) {
	x.xxx_hidden_UserId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *ChangePasswordRequest) HasCurrentPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ChangePasswordRequest) HasNewPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ChangePasswordRequest) HasConfirmPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ChangePasswordRequest) HasInvalidateSessions() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ChangePasswordRequest) HasInvalidateApiKeys() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ChangePasswordRequest) HasForceChange() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ChangePasswordRequest) HasUserId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *ChangePasswordRequest) ClearCurrentPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CurrentPassword = nil
}

func (x *ChangePasswordRequest) ClearNewPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_NewPassword = nil
}

func (x *ChangePasswordRequest) ClearConfirmPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ConfirmPassword = nil
}

func (x *ChangePasswordRequest) ClearInvalidateSessions() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_InvalidateSessions = false
}

func (x *ChangePasswordRequest) ClearInvalidateApiKeys() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_InvalidateApiKeys = false
}

func (x *ChangePasswordRequest) ClearForceChange() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ForceChange = false
}

func (x *ChangePasswordRequest) ClearUserId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_UserId = nil
}

type ChangePasswordRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Current password (required for verification)
	CurrentPassword *string
	// New password
	NewPassword *string
	// Confirm new password
	ConfirmPassword *string
	// Whether to invalidate all existing sessions after password change
	InvalidateSessions *bool
	// Whether to invalidate all existing API keys after password change
	InvalidateApiKeys *bool
	// Optional: Force password change (admin-only operation)
	ForceChange *bool
	// Admin user ID for admin operations (optional - if not provided, change for current user)
	UserId *string
}

func (b0 ChangePasswordRequest_builder) Build() *ChangePasswordRequest {
	m0 := &ChangePasswordRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CurrentPassword != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_CurrentPassword = b.CurrentPassword
	}
	if b.NewPassword != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_NewPassword = b.NewPassword
	}
	if b.ConfirmPassword != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_ConfirmPassword = b.ConfirmPassword
	}
	if b.InvalidateSessions != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_InvalidateSessions = *b.InvalidateSessions
	}
	if b.InvalidateApiKeys != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_InvalidateApiKeys = *b.InvalidateApiKeys
	}
	if b.ForceChange != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_ForceChange = *b.ForceChange
	}
	if b.UserId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_UserId = b.UserId
	}
	return m0
}

var File_authpb_v2_change_password_request_proto protoreflect.FileDescriptor

const file_authpb_v2_change_password_request_proto_rawDesc = "" +
	"\n" +
	"'authpb/v2/change_password_request.proto\x12\aauth.v2\x1a!google/protobuf/go_features.proto\"\xad\x02\n" +
	"\x15ChangePasswordRequest\x12)\n" +
	"\x10current_password\x18\x01 \x01(\tR\x0fcurrentPassword\x12!\n" +
	"\fnew_password\x18\x02 \x01(\tR\vnewPassword\x12)\n" +
	"\x10confirm_password\x18\x03 \x01(\tR\x0fconfirmPassword\x12/\n" +
	"\x13invalidate_sessions\x18\x04 \x01(\bR\x12invalidateSessions\x12.\n" +
	"\x13invalidate_api_keys\x18\x05 \x01(\bR\x11invalidateApiKeys\x12!\n" +
	"\fforce_change\x18\x06 \x01(\bR\vforceChange\x12\x17\n" +
	"\auser_id\x18\a \x01(\tR\x06userIdB\x94\x01\n" +
	"\vcom.auth.v2B\x1aChangePasswordRequestProtoP\x01Z$github.com/jdfalk/gcommon/pkg/authpb\xa2\x02\x03AXX\xaa\x02\aAuth.V2\xca\x02\aAuth\\V2\xe2\x02\x13Auth\\V2\\GPBMetadata\xea\x02\bAuth::V2\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_authpb_v2_change_password_request_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_authpb_v2_change_password_request_proto_goTypes = []any{
	(*ChangePasswordRequest)(nil), // 0: auth.v2.ChangePasswordRequest
}
var file_authpb_v2_change_password_request_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_authpb_v2_change_password_request_proto_init() }
func file_authpb_v2_change_password_request_proto_init() {
	if File_authpb_v2_change_password_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_authpb_v2_change_password_request_proto_rawDesc), len(file_authpb_v2_change_password_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_authpb_v2_change_password_request_proto_goTypes,
		DependencyIndexes: file_authpb_v2_change_password_request_proto_depIdxs,
		MessageInfos:      file_authpb_v2_change_password_request_proto_msgTypes,
	}.Build()
	File_authpb_v2_change_password_request_proto = out.File
	file_authpb_v2_change_password_request_proto_goTypes = nil
	file_authpb_v2_change_password_request_proto_depIdxs = nil
}
