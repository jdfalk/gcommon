// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: webpb/v1/rate_limit_config.proto

package webpb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	commonpb "github.com/jdfalk/gcommon/pkg/commonpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RateLimitConfig message definition.
type WebRateLimitConfig struct {
	state                        protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Enabled           bool                       `protobuf:"varint,1,opt,name=enabled"`
	xxx_hidden_RequestsPerSecond int32                      `protobuf:"varint,2,opt,name=requests_per_second,json=requestsPerSecond"`
	xxx_hidden_BurstSize         int32                      `protobuf:"varint,3,opt,name=burst_size,json=burstSize"`
	xxx_hidden_Strategy          commonpb.RateLimitStrategy `protobuf:"varint,4,opt,name=strategy,enum=common.v1.RateLimitStrategy"`
	xxx_hidden_KeyExtractor      *string                    `protobuf:"bytes,5,opt,name=key_extractor,json=keyExtractor"`
	xxx_hidden_SkipConditions    []string                   `protobuf:"bytes,6,rep,name=skip_conditions,json=skipConditions"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *WebRateLimitConfig) Reset() {
	*x = WebRateLimitConfig{}
	mi := &file_webpb_v1_rate_limit_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebRateLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRateLimitConfig) ProtoMessage() {}

func (x *WebRateLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_webpb_v1_rate_limit_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebRateLimitConfig) GetEnabled() bool {
	if x != nil {
		return x.xxx_hidden_Enabled
	}
	return false
}

func (x *WebRateLimitConfig) GetRequestsPerSecond() int32 {
	if x != nil {
		return x.xxx_hidden_RequestsPerSecond
	}
	return 0
}

func (x *WebRateLimitConfig) GetBurstSize() int32 {
	if x != nil {
		return x.xxx_hidden_BurstSize
	}
	return 0
}

func (x *WebRateLimitConfig) GetStrategy() commonpb.RateLimitStrategy {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_Strategy
		}
	}
	return commonpb.RateLimitStrategy(0)
}

func (x *WebRateLimitConfig) GetKeyExtractor() string {
	if x != nil {
		if x.xxx_hidden_KeyExtractor != nil {
			return *x.xxx_hidden_KeyExtractor
		}
		return ""
	}
	return ""
}

func (x *WebRateLimitConfig) GetSkipConditions() []string {
	if x != nil {
		return x.xxx_hidden_SkipConditions
	}
	return nil
}

func (x *WebRateLimitConfig) SetEnabled(v bool) {
	x.xxx_hidden_Enabled = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *WebRateLimitConfig) SetRequestsPerSecond(v int32) {
	x.xxx_hidden_RequestsPerSecond = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *WebRateLimitConfig) SetBurstSize(v int32) {
	x.xxx_hidden_BurstSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *WebRateLimitConfig) SetStrategy(v commonpb.RateLimitStrategy) {
	x.xxx_hidden_Strategy = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *WebRateLimitConfig) SetKeyExtractor(v string) {
	x.xxx_hidden_KeyExtractor = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *WebRateLimitConfig) SetSkipConditions(v []string) {
	x.xxx_hidden_SkipConditions = v
}

func (x *WebRateLimitConfig) HasEnabled() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebRateLimitConfig) HasRequestsPerSecond() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WebRateLimitConfig) HasBurstSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *WebRateLimitConfig) HasStrategy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *WebRateLimitConfig) HasKeyExtractor() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *WebRateLimitConfig) ClearEnabled() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Enabled = false
}

func (x *WebRateLimitConfig) ClearRequestsPerSecond() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_RequestsPerSecond = 0
}

func (x *WebRateLimitConfig) ClearBurstSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_BurstSize = 0
}

func (x *WebRateLimitConfig) ClearStrategy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Strategy = commonpb.RateLimitStrategy_RATE_LIMIT_STRATEGY_UNSPECIFIED
}

func (x *WebRateLimitConfig) ClearKeyExtractor() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_KeyExtractor = nil
}

type WebRateLimitConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Enable rate limiting
	Enabled *bool
	// Requests per second
	RequestsPerSecond *int32
	// Burst size
	BurstSize *int32
	// Rate limit strategy
	Strategy *commonpb.RateLimitStrategy
	// Rate limit key extractor
	KeyExtractor *string
	// Skip conditions
	SkipConditions []string
}

func (b0 WebRateLimitConfig_builder) Build() *WebRateLimitConfig {
	m0 := &WebRateLimitConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Enabled != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Enabled = *b.Enabled
	}
	if b.RequestsPerSecond != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_RequestsPerSecond = *b.RequestsPerSecond
	}
	if b.BurstSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_BurstSize = *b.BurstSize
	}
	if b.Strategy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Strategy = *b.Strategy
	}
	if b.KeyExtractor != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_KeyExtractor = b.KeyExtractor
	}
	x.xxx_hidden_SkipConditions = b.SkipConditions
	return m0
}

var File_webpb_v1_rate_limit_config_proto protoreflect.FileDescriptor

const file_webpb_v1_rate_limit_config_proto_rawDesc = "" +
	"\n" +
	" webpb/v1/rate_limit_config.proto\x12\x06web.v1\x1a%commonpb/v1/rate_limit_strategy.proto\x1a!google/protobuf/go_features.proto\x1a\x1bbuf/validate/validate.proto\"\xaa\x02\n" +
	"\x12WebRateLimitConfig\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x127\n" +
	"\x13requests_per_second\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\x11requestsPerSecond\x12&\n" +
	"\n" +
	"burst_size\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\tburstSize\x128\n" +
	"\bstrategy\x18\x04 \x01(\x0e2\x1c.common.v1.RateLimitStrategyR\bstrategy\x12,\n" +
	"\rkey_extractor\x18\x05 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\fkeyExtractor\x121\n" +
	"\x0fskip_conditions\x18\x06 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\x0eskipConditionsB\x88\x01\n" +
	"\n" +
	"com.web.v1B\x14RateLimitConfigProtoP\x01Z#github.com/jdfalk/gcommon/pkg/webpb\xa2\x02\x03WXX\xaa\x02\x06Web.V1\xca\x02\x06Web\\V1\xe2\x02\x12Web\\V1\\GPBMetadata\xea\x02\aWeb::V1\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_webpb_v1_rate_limit_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_webpb_v1_rate_limit_config_proto_goTypes = []any{
	(*WebRateLimitConfig)(nil),      // 0: web.v1.WebRateLimitConfig
	(commonpb.RateLimitStrategy)(0), // 1: common.v1.RateLimitStrategy
}
var file_webpb_v1_rate_limit_config_proto_depIdxs = []int32{
	1, // 0: web.v1.WebRateLimitConfig.strategy:type_name -> common.v1.RateLimitStrategy
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_webpb_v1_rate_limit_config_proto_init() }
func file_webpb_v1_rate_limit_config_proto_init() {
	if File_webpb_v1_rate_limit_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_webpb_v1_rate_limit_config_proto_rawDesc), len(file_webpb_v1_rate_limit_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_webpb_v1_rate_limit_config_proto_goTypes,
		DependencyIndexes: file_webpb_v1_rate_limit_config_proto_depIdxs,
		MessageInfos:      file_webpb_v1_rate_limit_config_proto_msgTypes,
	}.Build()
	File_webpb_v1_rate_limit_config_proto = out.File
	file_webpb_v1_rate_limit_config_proto_goTypes = nil
	file_webpb_v1_rate_limit_config_proto_depIdxs = nil
}
